<?php

namespace App\Filament\Resources;

use App\Filament\Resources\AssociatedVulnerabilityResource\Pages;
use App\Filament\Resources\AssociatedVulnerabilityResource\RelationManagers;
use App\Models\Asset;
use App\Models\AssociatedVulnerability;
use App\Models\Report;
use App\Models\RiskLevel;
use App\Models\Status;
use App\Models\Vulnerability;
use App\Services\RiskEvaluationService;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\SelectFilter;

class AssociatedVulnerabilityResource extends Resource
{
    protected static ?string $model = AssociatedVulnerability::class;

    protected static ?string $navigationIcon = 'carbon-text-link';

    protected static ?string $navigationGroup = 'Gesti칩n de vulnerabilidades';

    protected static ?int $navigationSort = 10;

    public static function getLabel(): ?string
    {
        return 'Vulnerabilidad asociada';
    }

    public static function getNavigationLabel(): string
    {
        return 'Vulnerabilidades asociadas';
    }


    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Select::make('asset_id')
                    ->label('Activo')
                    ->preload()
                    ->live(debounce: 300)
                    ->afterStateUpdated(function (Get $get, Set $set, ?string $old, ?string $state) {
                        [$riskLevelId, $patchMaxAt, $statusId] = app(RiskEvaluationService::class)
                            ->handle($get('report_id'), $get('asset_id'), $get('vulnerability_id'));
                        $set('risk_level_id', $riskLevelId);
                        $set('patch_max_at', $patchMaxAt);
                        $set('status_id', $statusId);
                    })
                    ->relationship('asset', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Select::make('vulnerability_id')
                    ->label('Vulnerabilidad')
                    ->preload()
                    ->live(debounce: 300)
                    ->afterStateUpdated(function (Get $get, Set $set, ?string $old, ?string $state) {
                        [$riskLevelId, $patchMaxAt, $statusId] = app(RiskEvaluationService::class)
                            ->handle($get('report_id'), $get('asset_id'), $get('vulnerability_id'));
                        $set('risk_level_id', $riskLevelId);
                        $set('patch_max_at', $patchMaxAt);
                        $set('status_id', $statusId);
                    })
                    ->relationship('vulnerability', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Select::make('status_id')
                    ->label('Estado')
                    ->preload()
					->disabled(fn (string $context): bool => $context === 'create')
                    ->relationship('status', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Forms\Components\TextInput::make('port')
                    ->label('Puerto')
                    ->nullable()
                    ->maxLength(20),
                Select::make('risk_level_id')
                    ->label('Nivel de riesgo')
                    ->preload()
                    ->disabled()
                    ->relationship('riskLevel', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                DatePicker::make('patch_max_at')
                    ->label('Fecha m치xima para remediaci칩n')
                    ->required()
                    ->disabled(),
                DatePicker::make('last_scan_at')
                    ->label('Fecha de Ultimo Escaneo')
                    ->required(),
                DatePicker::make('patch_at')
                    ->label('Fecha de remediaci칩n')
                    ->nullable(),
                Forms\Components\Textarea::make('comments')
                    ->label('Comentarios')
                    ->required()
                    ->maxLength(65535)
                    ->rows(5)
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('vulnerability.name')
                    ->label('Vulnerabilidad')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('port')
                    ->label('Puerto')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('asset.name')
                    ->label('Activo')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('riskLevel.name')
                    ->label('Nivel de riesgo')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('status.name')
                    ->label('Estado')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('report.name')
                    ->label('Informe')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Creado el')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Actualizado el')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                SelectFilter::make('asset_id')
                    ->label('Activo')
                    ->multiple()
                    ->options(fn (): array => Asset::query()->pluck('name', 'id')->all()),
                SelectFilter::make('vulnerability_id')
                    ->label('Vulnerabilidad')
                    ->multiple()
                    ->options(fn (): array => Vulnerability::query()->pluck('name', 'id')->all()),
                SelectFilter::make('risk_level_id')
                    ->label('Nivel de riesgo')
                    ->multiple()
                    ->options(fn (): array => RiskLevel::query()->pluck('name', 'id')->all()),
                SelectFilter::make('status_id')
                    ->label('Estado')
                    ->multiple()
                    ->options(fn (): array => Status::query()->pluck('name', 'id')->all()),
                SelectFilter::make('report_id')
                    ->label('Reporte')
                    ->multiple()
                    ->options(fn (): array => Report::query()->pluck('name', 'id')->all()),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAssociatedVulnerabilities::route('/'),
            'create' => Pages\CreateAssociatedVulnerability::route('/create'),
            'edit' => Pages\EditAssociatedVulnerability::route('/{record}/edit'),
        ];
    }
}
