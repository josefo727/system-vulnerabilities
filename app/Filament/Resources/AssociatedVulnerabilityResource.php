<?php

namespace App\Filament\Resources;

use App\Filament\Resources\AssociatedVulnerabilityResource\Pages;
use App\Filament\Resources\AssociatedVulnerabilityResource\RelationManagers;
use App\Models\Asset;
use App\Models\AssociatedVulnerability;
use App\Models\Report;
use App\Models\RiskLevel;
use App\Models\Status;
use App\Models\Vulnerability;
use App\Services\RiskEvaluationService;
use Filament\Actions\Concerns\CanNotify;
use Filament\Forms;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\ToggleButtons;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Support\Enums\Alignment;
use Filament\Tables;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\SelectFilter;
use Illuminate\Support\Facades\Log;
use Filament\Tables\Columns\IconColumn;

class AssociatedVulnerabilityResource extends Resource
{
    use CanNotify;

    protected static ?string $model = AssociatedVulnerability::class;

    protected static ?string $navigationIcon = 'carbon-text-link';

    protected static ?string $navigationGroup = 'Gestión de vulnerabilidades';

    protected static ?int $navigationSort = 10;

    public static function getLabel(): ?string
    {
        return 'Vulnerabilidad asociada';
    }

    public static function getNavigationLabel(): string
    {
        return 'Vulnerabilidades asociadas';
    }

    public static function getPluralLabel(): ?string
    {
        return self::getNavigationLabel();
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Select::make('asset_id')
                    ->label('Activo')
                    ->preload()
                    ->searchable()
                    ->live(debounce: 300)
                    ->afterStateUpdated(function (Get $get, Set $set, ?string $old, ?string $state) {
                        [$riskLevelId, $patchMaxAt, $statusId] = app(RiskEvaluationService::class)
                            ->handle($get('report_id'), $get('asset_id'), $get('vulnerability_id'));
                        $set('risk_level_id', $riskLevelId);
                        $set('patch_max_at', $patchMaxAt);
                        $set('status_id', $statusId);
                    })
                    ->relationship('asset', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Select::make('vulnerability_id')
                    ->label('Vulnerabilidad')
                    ->preload()
                    ->searchable()
                    ->live(debounce: 300)
                    ->afterStateUpdated(function (Get $get, Set $set, ?string $old, ?string $state) {
                        [$riskLevelId, $patchMaxAt, $statusId] = app(RiskEvaluationService::class)
                            ->handle($get('report_id'), $get('asset_id'), $get('vulnerability_id'));
                        $set('risk_level_id', $riskLevelId);
                        $set('patch_max_at', $patchMaxAt);
                        $set('status_id', $statusId);
                    })
                    ->relationship('vulnerability', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Select::make('status_id')
                    ->label('Estado')
                    ->preload()
					->disabled(fn (string $context): bool => $context === 'create')
                    ->disableOptionWhen(fn (string $value): bool => (int) $value === Status::getMitigatedStatusId() && !auth()->user()->isAdmin())
                    ->relationship('status', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                Forms\Components\TextInput::make('port')
                    ->label('Puerto')
                    ->nullable()
                    ->maxLength(20),
                Select::make('risk_level_id')
                    ->label('Nivel de riesgo')
                    ->preload()
                    ->disabled()
                    ->relationship('riskLevel', 'name', fn (Builder $query) => $query->orderBy('id', 'ASC')),
                DatePicker::make('patch_max_at')
                    ->label('Fecha máxima para remediación')
                    ->required()
                    ->disabled(),
                DatePicker::make('last_scan_at')
                    ->label('Fecha de Ultimo Escaneo')
                    ->required(),
                DatePicker::make('patch_at')
                    ->label('Fecha de remediación')
                    ->nullable(),
                Toggle::make('needs_approval')
                    ->label('Solicitud de aprobación')
                    ->hidden(fn($context, Get $get) => $context === 'create' || $get('status_id') === Status::getMitigatedStatusId())
                    ->reactive()
                    ->onColor('success')
                    ->offColor('danger'),
                ToggleButtons::make('approval')
                    ->hidden(fn($context, Get $get) => $context === 'create' || !$get('needs_approval') || !auth()->user()->isAdmin())
                    ->label('¿Desea aprobar como mitigado?')
                    ->options([
                        'approve' => 'Aprobar',
                        'reject' => 'Rechazar',
                    ])
                    ->icons([
                        'approve' => 'carbon-checkmark-filled',
                        'reject' => 'heroicon-s-no-symbol',
                    ])
                    ->colors([
                        'approve' => 'success',
                        'reject' => 'warning',
                    ])
                    ->reactive()
                    ->afterStateUpdated(function ($state, Get $get, Set $set) {
                        try {
                            $id = $get('id');
                            if ($state === 'approve') {
                                $av = AssociatedVulnerability::approveAsMitigated($id);
                            }
                            if ($state === 'reject') {
                                $av = AssociatedVulnerability::rejectAsMitigated($id);
                            }
                            if(!!$av) {
                                $set('status_id', $av->status_id);
                                $set('needs_approval', $av->needs_approval);
                                $set('patch_at', $av->patch_at ? $av->patch_at->format('Y-m-d') : null);
                            }
                            $title = 'Solicitud ' . ($state === 'approve' ? 'aprobada' : 'rechazada') . ' satisfactoriamente';
                            $type = $state === 'approve' ? 'success' : 'warning';
                            $notify = Notification::make()
                                ->{$type}()
                                ->title($title);
                            $notify->send();
                        } catch (\Throwable $th) {
                            Log::error($th->getMessage());
                        }
                    })
                    ->inline(),
                Forms\Components\Textarea::make('comments')
                    ->label('Comentarios')
                    ->nullable()
                    ->maxLength(65535)
                    ->rows(5)
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('vulnerability.name')
                    ->label('Vulnerabilidad')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('port')
                    ->label('Puerto')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('asset.name')
                    ->label('Activo')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('riskLevel.name')
                    ->label('Nivel de riesgo')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('status.name')
                    ->label('Estado')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                IconColumn::make('needs_approval')
                    ->label('¿Apr?')
                    ->alignment(Alignment::Center)
                    ->boolean(),
                Tables\Columns\TextColumn::make('report.name')
                    ->label('Informe')
                    ->numeric()
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Creado el')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Actualizado el')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Filter::make('needs_approval')
                    ->label('En espera aprobación')
                    ->query(fn (Builder $query): Builder => $query->where('needs_approval', true)),
                SelectFilter::make('asset_id')
                    ->label('Activo')
                    ->multiple()
                    ->options(fn (): array => Asset::query()->pluck('name', 'id')->all()),
                SelectFilter::make('vulnerability_id')
                    ->label('Vulnerabilidad')
                    ->multiple()
                    ->options(fn (): array => Vulnerability::query()->pluck('name', 'id')->all()),
                SelectFilter::make('risk_level_id')
                    ->label('Nivel de riesgo')
                    ->multiple()
                    ->options(fn (): array => RiskLevel::query()->pluck('name', 'id')->all()),
                SelectFilter::make('status_id')
                    ->label('Estado')
                    ->multiple()
                    ->options(fn (): array => Status::query()->pluck('name', 'id')->all()),
                SelectFilter::make('report_id')
                    ->label('Reporte')
                    ->multiple()
                    ->options(fn (): array => Report::query()->pluck('name', 'id')->all()),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->persistSearchInSession()
            ->persistColumnSearchesInSession()
            ->persistFiltersInSession(true);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAssociatedVulnerabilities::route('/'),
            'create' => Pages\CreateAssociatedVulnerability::route('/create'),
            'edit' => Pages\EditAssociatedVulnerability::route('/{record}/edit'),
        ];
    }
}
