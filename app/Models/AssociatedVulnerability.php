<?php

namespace App\Models;

use App\Services\RiskEvaluationService;
use App\Traits\HasAuthor;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class AssociatedVulnerability extends Model
{
    use HasAuthor;

    protected $guarded = ['id'];

    protected static function boot(): void
    {
        parent::boot();

        static::creating(function ($model) {
            self::evaluateRisk($model);
        });

        static::updating(function ($model) {
            self::evaluateRisk($model);
        });
    }

    /**
     * @param self $model
     */
    private static function evaluateRisk(self $model): void
    {
        [$riskLevelId, $patchMaxAt, $statusId] = app(RiskEvaluationService::class)
            ->handle($model->report_id, $model->asset_id, $model->vulnerability_id);

        $model->risk_level_id = $riskLevelId;
        $model->patch_max_at = $patchMaxAt;
        $model->status_id = $model->isDirty('status_id') ? $model->status_id : $statusId;
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function asset(): BelongsTo
    {
        return $this->belongsTo(Asset::class);
    }

    public function vulnerability(): BelongsTo
    {
        return $this->belongsTo(Vulnerability::class);
    }

    public function riskLevel(): BelongsTo
    {
        return $this->belongsTo(RiskLevel::class);
    }

    public function status(): BelongsTo
    {
        return $this->belongsTo(Status::class);
    }

    public function report(): BelongsTo
    {
        return $this->belongsTo(Report::class);
    }
}
